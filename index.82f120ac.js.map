{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a5fd07fa01589658$exports = {};\n/* eslint-disable function-paren-newline */ \"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.board = initialState || this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    createEmptyBoard() {\n        return Array(4).fill().map(()=>Array(4).fill(0));\n    }\n    moveLeft() {\n        let moved = false;\n        for (const row of this.board){\n            const newRow = this.merge(this.slide(row));\n            if (!this.arraysEqual(row, newRow)) moved = true;\n            Object.assign(row, newRow);\n        }\n        if (moved) this.addRandomTile();\n    }\n    moveRight() {\n        let moved = false;\n        for (const row of this.board){\n            const reversedRow = row.slice().reverse();\n            const newRow = this.merge(this.slide(reversedRow)).reverse();\n            if (!this.arraysEqual(row, newRow)) {\n                moved = true;\n                Object.assign(row, newRow);\n            }\n        }\n        if (moved) this.addRandomTile();\n    }\n    moveUp() {\n        let moved = false;\n        for(let col = 0; col < 4; col++){\n            const column = this.getColumn(col);\n            const newColumn = this.merge(this.slide(column));\n            if (!this.arraysEqual(column, newColumn)) {\n                moved = true;\n                this.setColumn(col, newColumn);\n            }\n        }\n        if (moved) this.addRandomTile();\n    }\n    moveDown() {\n        let moved = false;\n        for(let col = 0; col < 4; col++){\n            const column = this.getColumn(col).reverse();\n            const newColumn = this.merge(this.slide(column)).reverse();\n            if (!this.arraysEqual(column, newColumn)) {\n                moved = true;\n                this.setColumn(col, newColumn);\n            }\n        }\n        if (moved) this.addRandomTile();\n    }\n    getColumn(index) {\n        const column = [];\n        for(let row = 0; row < 4; row++)column.push(this.board[row][index]);\n        return column;\n    }\n    setColumn(index, newColumn) {\n        for(let row = 0; row < 4; row++)this.board[row][index] = newColumn[row];\n    }\n    slide(row) {\n        const newRow = row.filter((value)=>value !== 0);\n        while(newRow.length < 4)newRow.push(0);\n        return newRow;\n    }\n    merge(row) {\n        for(let i = 0; i < row.length - 1; i++)if (row[i] !== 0 && row[i] === row[i + 1]) {\n            row[i] *= 2;\n            row[i + 1] = 0;\n            this.score += row[i];\n        }\n        return this.slide(row);\n    }\n    arraysEqual(arr1, arr2) {\n        return arr1.length === arr2.length && arr1.every((value, index)=>value === arr2[index]);\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        if (this.board.some((row)=>row.includes(2048))) return \"win\";\n        const hasMoves = this.board.some((row, rowIndex)=>row.some((value, colIndex)=>{\n                if (value === 0) return true;\n                if (colIndex < 3 && value === row[colIndex + 1]) return true;\n                if (rowIndex < 3 && value === this.board[rowIndex + 1][colIndex]) return true;\n                return false;\n            }));\n        if (!hasMoves) return \"lose\";\n        return \"playing\";\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        if (this.status === \"idle\") {\n            this.status = \"playing\";\n            this.addRandomTile();\n            this.addRandomTile();\n        }\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\";\n        this.start();\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < this.board.length; row++){\n            for(let col = 0; col < this.board[row].length; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length > 0) {\n            const { row: newRow, col: newCol } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[newRow][newCol] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nlet $09e991522ca7e64e$var$isGameStarted = false;\n// eslint-disable-next-line no-shadow\ndocument.addEventListener(\"keydown\", (event)=>{\n    if (!$09e991522ca7e64e$var$isGameStarted) return;\n    // eslint-disable-next-line no-shadow\n    const status = $09e991522ca7e64e$var$game.getStatus();\n    if (status !== \"playing\") return;\n    switch(event.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$updateUI();\n});\nfunction $09e991522ca7e64e$var$updateUI() {\n    const board = $09e991522ca7e64e$var$game.getState();\n    const score = $09e991522ca7e64e$var$game.getScore();\n    // eslint-disable-next-line no-shadow\n    const status = $09e991522ca7e64e$var$game.getStatus();\n    document.querySelector(\".game-score\").textContent = score;\n    const cells = document.querySelectorAll(\".field-cell\");\n    let index = 0;\n    for (const row of board)for (const value of row){\n        const cell = cells[index];\n        cell.className = \"field-cell\";\n        if (value !== 0) {\n            cell.classList.add(`field-cell--${value}`);\n            cell.textContent = value;\n        } else cell.textContent = \"\";\n        index++;\n    }\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n    document.querySelector(\".message-lose\").classList.toggle(\"hidden\", status !== \"lose\");\n    document.querySelector(\".message-win\").classList.toggle(\"hidden\", status !== \"win\");\n    const startButton = document.querySelector(\".button.start\");\n    if (status === \"idle\") {\n        startButton.textContent = \"Start\";\n        startButton.classList.remove(\"restart\");\n    } else {\n        startButton.textContent = \"Restart\";\n        startButton.classList.add(\"restart\");\n    }\n}\ndocument.querySelector(\".button.start\").addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$isGameStarted = true;\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$isGameStarted = true;\n    }\n    $09e991522ca7e64e$var$updateUI();\n});\n\n\n//# sourceMappingURL=index.82f120ac.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\n// const Game = require('../modules/Game.class');\n// const game = new Game();\n\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\nlet isGameStarted = false;\n\n// eslint-disable-next-line no-shadow\ndocument.addEventListener('keydown', (event) => {\n  if (!isGameStarted) {\n    return;\n  }\n\n  // eslint-disable-next-line no-shadow\n  const status = game.getStatus();\n\n  if (status !== 'playing') {\n    return;\n  }\n\n  switch (event.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  updateUI();\n});\n\nfunction updateUI() {\n  const board = game.getState();\n  const score = game.getScore();\n  // eslint-disable-next-line no-shadow\n  const status = game.getStatus();\n\n  document.querySelector('.game-score').textContent = score;\n\n  const cells = document.querySelectorAll('.field-cell');\n  let index = 0;\n\n  for (const row of board) {\n    for (const value of row) {\n      const cell = cells[index];\n\n      cell.className = 'field-cell';\n\n      if (value !== 0) {\n        cell.classList.add(`field-cell--${value}`);\n        cell.textContent = value;\n      } else {\n        cell.textContent = '';\n      }\n      index++;\n    }\n  }\n\n  document.querySelector('.message-start').classList.add('hidden');\n\n  document\n    .querySelector('.message-lose')\n    .classList.toggle('hidden', status !== 'lose');\n\n  document\n    .querySelector('.message-win')\n    .classList.toggle('hidden', status !== 'win');\n\n  const startButton = document.querySelector('.button.start');\n\n  if (status === 'idle') {\n    startButton.textContent = 'Start';\n    startButton.classList.remove('restart');\n  } else {\n    startButton.textContent = 'Restart';\n    startButton.classList.add('restart');\n  }\n}\n\ndocument.querySelector('.button.start').addEventListener('click', () => {\n  if (game.getStatus() === 'idle') {\n    game.start();\n    isGameStarted = true;\n  } else {\n    game.restart();\n    isGameStarted = true;\n  }\n  updateUI();\n});\n","/* eslint-disable function-paren-newline */\n'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.board = initialState || this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  createEmptyBoard() {\n    return Array(4)\n      .fill()\n      .map(() => Array(4).fill(0));\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (const row of this.board) {\n      const newRow = this.merge(this.slide(row));\n\n      if (!this.arraysEqual(row, newRow)) {\n        moved = true;\n      }\n      Object.assign(row, newRow);\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  moveRight() {\n    let moved = false;\n\n    for (const row of this.board) {\n      const reversedRow = row.slice().reverse();\n      const newRow = this.merge(this.slide(reversedRow)).reverse();\n\n      if (!this.arraysEqual(row, newRow)) {\n        moved = true;\n\n        Object.assign(row, newRow);\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  moveUp() {\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const column = this.getColumn(col);\n      const newColumn = this.merge(this.slide(column));\n\n      if (!this.arraysEqual(column, newColumn)) {\n        moved = true;\n        this.setColumn(col, newColumn);\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  moveDown() {\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const column = this.getColumn(col).reverse();\n      const newColumn = this.merge(this.slide(column)).reverse();\n\n      if (!this.arraysEqual(column, newColumn)) {\n        moved = true;\n        this.setColumn(col, newColumn);\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  getColumn(index) {\n    const column = [];\n\n    for (let row = 0; row < 4; row++) {\n      column.push(this.board[row][index]);\n    }\n\n    return column;\n  }\n\n  setColumn(index, newColumn) {\n    for (let row = 0; row < 4; row++) {\n      this.board[row][index] = newColumn[row];\n    }\n  }\n\n  slide(row) {\n    const newRow = row.filter((value) => value !== 0);\n\n    while (newRow.length < 4) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  merge(row) {\n    for (let i = 0; i < row.length - 1; i++) {\n      if (row[i] !== 0 && row[i] === row[i + 1]) {\n        row[i] *= 2;\n        row[i + 1] = 0;\n        this.score += row[i];\n      }\n    }\n\n    return this.slide(row);\n  }\n\n  arraysEqual(arr1, arr2) {\n    return (\n      arr1.length === arr2.length &&\n      arr1.every((value, index) => value === arr2[index])\n    );\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.board.some((row) => row.includes(2048))) {\n      return 'win';\n    }\n\n    const hasMoves = this.board.some((row, rowIndex) =>\n      row.some((value, colIndex) => {\n        if (value === 0) {\n          return true;\n        }\n\n        if (colIndex < 3 && value === row[colIndex + 1]) {\n          return true;\n        }\n\n        if (rowIndex < 3 && value === this.board[rowIndex + 1][colIndex]) {\n          return true;\n        }\n\n        return false;\n      }),\n    );\n\n    if (!hasMoves) {\n      return 'lose';\n    }\n\n    return 'playing';\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'idle';\n    this.start();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { row: newRow, col: newCol } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[newRow][newCol] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n}\nmodule.exports = Game;\n"],"names":["a","$a5fd07fa01589658$exports","$09e991522ca7e64e$var$game","constructor","initialState","board","createEmptyBoard","score","status","Array","fill","map","moveLeft","moved","row","newRow","merge","slide","arraysEqual","Object","assign","addRandomTile","moveRight","reversedRow","slice","reverse","moveUp","col","column","getColumn","newColumn","setColumn","moveDown","index","push","filter","value","length","i","arr1","arr2","every","getScore","getState","getStatus","some","includes","rowIndex","colIndex","start","restart","emptyCells","newCol","Math","floor","random","__esModule","default","$09e991522ca7e64e$var$isGameStarted","$09e991522ca7e64e$var$updateUI","document","querySelector","textContent","cells","querySelectorAll","cell","className","classList","add","toggle","startButton","remove","addEventListener","event","key"],"version":3,"file":"index.82f120ac.js.map"}