{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $3d28d7f1aac198f5$exports = {};\n/* eslint-disable function-paren-newline */ function $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.board = initialState || this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"createEmptyBoard\",\n            value: function createEmptyBoard() {\n                return Array(4).fill().map(function() {\n                    return Array(4).fill(0);\n                });\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var moved = false;\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.board[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        var newRow = this.merge(this.slide(row));\n                        if (!this.arraysEqual(row, newRow)) moved = true;\n                        Object.assign(row, newRow);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                if (moved) this.addRandomTile();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var moved = false;\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.board[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        var reversedRow = row.slice().reverse();\n                        var newRow = this.merge(this.slide(reversedRow)).reverse();\n                        if (!this.arraysEqual(row, newRow)) {\n                            moved = true;\n                            Object.assign(row, newRow);\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                if (moved) this.addRandomTile();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var moved = false;\n                for(var col = 0; col < 4; col++){\n                    var column = this.getColumn(col);\n                    var newColumn = this.merge(this.slide(column));\n                    if (!this.arraysEqual(column, newColumn)) {\n                        moved = true;\n                        this.setColumn(col, newColumn);\n                    }\n                }\n                if (moved) this.addRandomTile();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var moved = false;\n                for(var col = 0; col < 4; col++){\n                    var column = this.getColumn(col).reverse();\n                    var newColumn = this.merge(this.slide(column)).reverse();\n                    if (!this.arraysEqual(column, newColumn)) {\n                        moved = true;\n                        this.setColumn(col, newColumn);\n                    }\n                }\n                if (moved) this.addRandomTile();\n            }\n        },\n        {\n            key: \"getColumn\",\n            value: function getColumn(index) {\n                var column = [];\n                for(var row = 0; row < 4; row++)column.push(this.board[row][index]);\n                return column;\n            }\n        },\n        {\n            key: \"setColumn\",\n            value: function setColumn(index, newColumn) {\n                for(var row = 0; row < 4; row++)this.board[row][index] = newColumn[row];\n            }\n        },\n        {\n            key: \"slide\",\n            value: function slide(row) {\n                var newRow = row.filter(function(value) {\n                    return value !== 0;\n                });\n                while(newRow.length < 4)newRow.push(0);\n                return newRow;\n            }\n        },\n        {\n            key: \"merge\",\n            value: function merge(row) {\n                for(var i = 0; i < row.length - 1; i++)if (row[i] !== 0 && row[i] === row[i + 1]) {\n                    row[i] *= 2;\n                    row[i + 1] = 0;\n                    this.score += row[i];\n                }\n                return this.slide(row);\n            }\n        },\n        {\n            key: \"arraysEqual\",\n            value: function arraysEqual(arr1, arr2) {\n                return arr1.length === arr2.length && arr1.every(function(value, index) {\n                    return value === arr2[index];\n                });\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                var _this = this;\n                if (this.board.some(function(row) {\n                    return row.includes(2048);\n                })) return \"win\";\n                var hasMoves = this.board.some(function(row, rowIndex) {\n                    return row.some(function(value, colIndex) {\n                        if (value === 0) return true;\n                        if (colIndex < 3 && value === row[colIndex + 1]) return true;\n                        if (rowIndex < 3 && value === _this.board[rowIndex + 1][colIndex]) return true;\n                        return false;\n                    });\n                });\n                if (!hasMoves) return \"lose\";\n                return \"playing\";\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                if (this.status === \"idle\") {\n                    this.status = \"playing\";\n                    this.addRandomTile();\n                    this.addRandomTile();\n                }\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.board = this.createEmptyBoard();\n                this.score = 0;\n                this.status = \"idle\";\n                this.start();\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var row = 0; row < this.board.length; row++){\n                    for(var col = 0; col < this.board[row].length; col++)if (this.board[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var _emptyCells_Math_floor = emptyCells[Math.floor(Math.random() * emptyCells.length)], newRow = _emptyCells_Math_floor.row, newCol = _emptyCells_Math_floor.col;\n                    this.board[newRow][newCol] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\n\"use strict\";\nvar $197cd56b15c33885$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($3d28d7f1aac198f5$exports)))();\nvar $197cd56b15c33885$var$isGameStarted = false;\n// eslint-disable-next-line no-shadow\ndocument.addEventListener(\"keydown\", function(event) {\n    if (!$197cd56b15c33885$var$isGameStarted) return;\n    // eslint-disable-next-line no-shadow\n    var status = $197cd56b15c33885$var$game.getStatus();\n    if (status !== \"playing\") return;\n    switch(event.key){\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $197cd56b15c33885$var$updateUI();\n});\nfunction $197cd56b15c33885$var$updateUI() {\n    var board = $197cd56b15c33885$var$game.getState();\n    var score = $197cd56b15c33885$var$game.getScore();\n    // eslint-disable-next-line no-shadow\n    var status = $197cd56b15c33885$var$game.getStatus();\n    document.querySelector(\".game-score\").textContent = score;\n    var cells = document.querySelectorAll(\".field-cell\");\n    var index = 0;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined, _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n    try {\n        for(var _iterator = board[Symbol.iterator](), _step; !(_iteratorNormalCompletion1 = (_step = _iterator.next()).done); _iteratorNormalCompletion1 = true){\n            var row = _step.value;\n            try {\n                for(var _iterator1 = row[Symbol.iterator](), _step1; !(_iteratorNormalCompletion = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion = true){\n                    var value = _step1.value;\n                    var cell = cells[index];\n                    cell.className = \"field-cell\";\n                    if (value !== 0) {\n                        cell.classList.add(\"field-cell--\".concat(value));\n                        cell.textContent = value;\n                    } else cell.textContent = \"\";\n                    index++;\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally{\n                try {\n                    if (!_iteratorNormalCompletion && _iterator1.return != null) {\n                        _iterator1.return();\n                    }\n                } finally{\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        }\n    } catch (err) {\n        _didIteratorError1 = true;\n        _iteratorError1 = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion1 && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError1) {\n                throw _iteratorError1;\n            }\n        }\n    }\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n    document.querySelector(\".message-lose\").classList.toggle(\"hidden\", status !== \"lose\");\n    document.querySelector(\".message-win\").classList.toggle(\"hidden\", status !== \"win\");\n    var startButton = document.querySelector(\".button.start\");\n    if (status === \"idle\") {\n        startButton.textContent = \"Start\";\n        startButton.classList.remove(\"restart\");\n    } else {\n        startButton.textContent = \"Restart\";\n        startButton.classList.add(\"restart\");\n    }\n}\ndocument.querySelector(\".button.start\").addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$game.getStatus() === \"idle\") {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$isGameStarted = true;\n    } else {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$isGameStarted = true;\n    }\n    $197cd56b15c33885$var$updateUI();\n});\n\n})();\n//# sourceMappingURL=index.b46f2b7e.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\n// const Game = require('../modules/Game.class');\n// const game = new Game();\n\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\nlet isGameStarted = false;\n\n// eslint-disable-next-line no-shadow\ndocument.addEventListener('keydown', (event) => {\n  if (!isGameStarted) {\n    return;\n  }\n\n  // eslint-disable-next-line no-shadow\n  const status = game.getStatus();\n\n  if (status !== 'playing') {\n    return;\n  }\n\n  switch (event.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  updateUI();\n});\n\nfunction updateUI() {\n  const board = game.getState();\n  const score = game.getScore();\n  // eslint-disable-next-line no-shadow\n  const status = game.getStatus();\n\n  document.querySelector('.game-score').textContent = score;\n\n  const cells = document.querySelectorAll('.field-cell');\n  let index = 0;\n\n  for (const row of board) {\n    for (const value of row) {\n      const cell = cells[index];\n\n      cell.className = 'field-cell';\n\n      if (value !== 0) {\n        cell.classList.add(`field-cell--${value}`);\n        cell.textContent = value;\n      } else {\n        cell.textContent = '';\n      }\n      index++;\n    }\n  }\n\n  document.querySelector('.message-start').classList.add('hidden');\n\n  document\n    .querySelector('.message-lose')\n    .classList.toggle('hidden', status !== 'lose');\n\n  document\n    .querySelector('.message-win')\n    .classList.toggle('hidden', status !== 'win');\n\n  const startButton = document.querySelector('.button.start');\n\n  if (status === 'idle') {\n    startButton.textContent = 'Start';\n    startButton.classList.remove('restart');\n  } else {\n    startButton.textContent = 'Restart';\n    startButton.classList.add('restart');\n  }\n}\n\ndocument.querySelector('.button.start').addEventListener('click', () => {\n  if (game.getStatus() === 'idle') {\n    game.start();\n    isGameStarted = true;\n  } else {\n    game.restart();\n    isGameStarted = true;\n  }\n  updateUI();\n});\n","/* eslint-disable function-paren-newline */\n'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.board = initialState || this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  createEmptyBoard() {\n    return Array(4)\n      .fill()\n      .map(() => Array(4).fill(0));\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (const row of this.board) {\n      const newRow = this.merge(this.slide(row));\n\n      if (!this.arraysEqual(row, newRow)) {\n        moved = true;\n      }\n      Object.assign(row, newRow);\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  moveRight() {\n    let moved = false;\n\n    for (const row of this.board) {\n      const reversedRow = row.slice().reverse();\n      const newRow = this.merge(this.slide(reversedRow)).reverse();\n\n      if (!this.arraysEqual(row, newRow)) {\n        moved = true;\n\n        Object.assign(row, newRow);\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  moveUp() {\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const column = this.getColumn(col);\n      const newColumn = this.merge(this.slide(column));\n\n      if (!this.arraysEqual(column, newColumn)) {\n        moved = true;\n        this.setColumn(col, newColumn);\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  moveDown() {\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const column = this.getColumn(col).reverse();\n      const newColumn = this.merge(this.slide(column)).reverse();\n\n      if (!this.arraysEqual(column, newColumn)) {\n        moved = true;\n        this.setColumn(col, newColumn);\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  getColumn(index) {\n    const column = [];\n\n    for (let row = 0; row < 4; row++) {\n      column.push(this.board[row][index]);\n    }\n\n    return column;\n  }\n\n  setColumn(index, newColumn) {\n    for (let row = 0; row < 4; row++) {\n      this.board[row][index] = newColumn[row];\n    }\n  }\n\n  slide(row) {\n    const newRow = row.filter((value) => value !== 0);\n\n    while (newRow.length < 4) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  merge(row) {\n    for (let i = 0; i < row.length - 1; i++) {\n      if (row[i] !== 0 && row[i] === row[i + 1]) {\n        row[i] *= 2;\n        row[i + 1] = 0;\n        this.score += row[i];\n      }\n    }\n\n    return this.slide(row);\n  }\n\n  arraysEqual(arr1, arr2) {\n    return (\n      arr1.length === arr2.length &&\n      arr1.every((value, index) => value === arr2[index])\n    );\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.board.some((row) => row.includes(2048))) {\n      return 'win';\n    }\n\n    const hasMoves = this.board.some((row, rowIndex) =>\n      row.some((value, colIndex) => {\n        if (value === 0) {\n          return true;\n        }\n\n        if (colIndex < 3 && value === row[colIndex + 1]) {\n          return true;\n        }\n\n        if (rowIndex < 3 && value === this.board[rowIndex + 1][colIndex]) {\n          return true;\n        }\n\n        return false;\n      }),\n    );\n\n    if (!hasMoves) {\n      return 'lose';\n    }\n\n    return 'playing';\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'idle';\n    this.start();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { row: newRow, col: newCol } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[newRow][newCol] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n}\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["a","$3d28d7f1aac198f5$exports","$197cd56b15c33885$var$game","protoProps","Game","initialState","instance","Constructor","TypeError","board","createEmptyBoard","score","status","key","value","Array","fill","map","moved","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","newRow","merge","slide","arraysEqual","Object","assign","err","return","addRandomTile","reversedRow","slice","reverse","col","column","getColumn","newColumn","setColumn","index","push","filter","length","i","arr1","arr2","every","_this","some","includes","rowIndex","colIndex","start","emptyCells","_emptyCells_Math_floor","Math","floor","random","newCol","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","prototype","__esModule","default","$197cd56b15c33885$var$isGameStarted","$197cd56b15c33885$var$updateUI","getState","getScore","getStatus","document","querySelector","textContent","cells","querySelectorAll","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","cell","className","classList","add","concat","toggle","startButton","remove","addEventListener","event","moveLeft","moveRight","moveUp","moveDown","restart"],"version":3,"file":"index.b46f2b7e.js.map"}